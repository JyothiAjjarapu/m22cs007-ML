# -*- coding: utf-8 -*-
"""M22CS007_task3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15-KvgXs844FytRGvmMp0JsCYi9TkrQn9
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn import linear_model
from sklearn import datasets, linear_model
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

from google.colab import files
uploaded = files.upload()

import io
df = pd.read_csv(io.BytesIO(uploaded['Data.csv']))
df

df.head()

x=df[['x']].values
y=df['y'].values
from sklearn.model_selection import train_test_split
x_t,x_v,y_t,y_v=train_test_split(x,y,test_size=0.3,random_state=0)

reg = linear_model.LinearRegression()

x_t,x_v,y_t,y_v=train_test_split(x,y,test_size=0.2,random_state=4)

reg.fit(x_t,y_t)

reg.coef_

a=reg.predict(x_v)

a

a[0]

y_pred_v=reg.predict(x_v)
y_pred_v[0]

plt.scatter(x_t,y_t)
plt.plot(x_t,y_t,'r')

plt.scatter(x_v,y_v)
plt.plot(x_v,y_v)

plt.scatter(x_t,y_t)
plt.plot(x_v,y_pred_v,'r')

from sklearn.metrics import r2_score
from sklearn.metrics import mean_squared_error
# predicting the accuracy score
score=r2_score(y_v,y_pred_v)
print('r2 socre is ',score)
print('mean_sqrd_error is==',mean_squared_error(y_v,y_pred_v))
print('root_mean_squared error of is==',np.sqrt(mean_squared_error(y_v,y_pred_v)))

#polynomial regression

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import PolynomialFeatures

x=df['x'].values
y=df['y'].values


poly=PolynomialFeatures(degree=2)
x_train_poly, x_test_poly = poly.fit_transform(x_t),poly.fit_transform(x_v)

reg = linear_model.LinearRegression()
result_poly=reg.fit(x_train_poly,y_t)


y_pred_test_poly=reg.predict(x_test_poly)

plt.scatter(x_t,y_t)

plt.scatter(x_v,y_v)
plt.plot(x_v,y_pred_test_poly,'r')

# predicting the accuracy score
score_poly=r2_score(y_v,y_pred_test_poly)
print('r2 socre is ',score_poly)
print('mean_sqrd_error is==',mean_squared_error(y_v,y_pred_test_poly))
print('root_mean_squared error of is==',np.sqrt(mean_squared_error(y_v,y_pred_test_poly)))



#polynomial regression using degree3

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import PolynomialFeatures

x1=df['x'].values
y1=df['y'].values


poly=PolynomialFeatures(degree=3)
x_train_p3, x_test_p3 = poly.fit_transform(x_t),poly.fit_transform(x_v)

reg = linear_model.LinearRegression()
result_poly=reg.fit(x_train_p3,y_t)


y_pred_test_p3=reg.predict(x_test_p3)

plt.scatter(x_t,y_t)

plt.scatter(x_v,y_v)
plt.plot(x_v,y_pred_test_p3,'r')

# predicting the accuracy score
score_p3=r2_score(y_v,y_pred_test_p3)
print('r2 socre is ',score_p3)
print('mean_sqrd_error is==',mean_squared_error(y_v,y_pred_test_p3))
print('root_mean_squared error of is==',np.sqrt(mean_squared_error(y_v,y_pred_test_p3)))

